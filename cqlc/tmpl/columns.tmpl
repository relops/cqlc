// Code generated by column_generator.go from tmp/columns.tmpl DO NOT EDIT.

package cqlc

import (
	"time"
	"math/big"

	"gopkg.in/inf.v0"
    "github.com/gocql/gocql"
)

{{ range $_, $t := .types }}
type {{ $t.Prefix }}Column interface {
	Column
	To(value *{{ $t.Literal }}) ColumnBinding
}

type Equality{{ $t.Prefix }}Column interface {
	{{ $t.Prefix }}Column
	Eq(value {{ $t.Literal }}) Condition
}

type Partitioned{{ $t.Prefix }}Column interface {
	PartitionedColumn
	Equality{{ $t.Prefix }}Column
}

type LastPartitioned{{ $t.Prefix }}Column interface {
	Partitioned{{ $t.Prefix }}Column
	In(value ...{{ $t.Literal }}) Condition
}

type Clustered{{ $t.Prefix }}Column interface {
	ClusteredColumn
	Equality{{ $t.Prefix }}Column
	Gt(value {{ $t.Literal }}) Condition
	Lt(value {{ $t.Literal }}) Condition
	Ge(value {{ $t.Literal }}) Condition
	Le(value {{ $t.Literal }}) Condition
}

type LastClustered{{ $t.Prefix }}Column interface {
	Clustered{{ $t.Prefix }}Column
	In(value ...{{ $t.Literal }}) Condition
}
{{ end }}

{{ range $_, $t := .types }}
type {{ $t.Prefix }}SliceColumn interface {
	ListColumn
	To(value *[]{{ $t.Literal }}) ColumnBinding
}
{{ end }}

{{ $inner := .types }}
{{ $outer := .types }}

{{ range $_, $ot := $outer }}
{{ range $_, $it := $inner }}
{{ if ne $ot.Prefix "Bytes" }}
type {{ $ot.Prefix }}{{ $it.Prefix }}MapColumn interface {
	Column
}
{{ end }}{{ end }}{{ end }}

type SetValueStep interface {
	Executable
	SelectWhereStep
	Apply(cols ...ColumnBinding) SetValueStep
	IfExists(cols ...ColumnBinding) CompareAndSwap

	{{ range $_, $t := .types }}
	Set{{ $t.Prefix }}(col {{ $t.Prefix }}Column, value {{ $t.Literal }}) SetValueStep
	{{ end }}

	{{ range $_, $ot := $outer }}
	{{ range $_, $it := $inner }}
	{{ if ne $ot.Prefix "Bytes" }}
	Set{{ $ot.Prefix }}{{ $it.Prefix }}Map(col {{ $ot.Prefix }}{{ $it.Prefix }}MapColumn, value map[{{ $ot.Literal }}]{{ $it.Literal }}) SetValueStep
	Set{{ $ot.Prefix }}{{ $it.Prefix }}MapValue(col {{ $ot.Prefix }}{{ $it.Prefix }}MapColumn, key {{ $ot.Literal }}, value {{ $it.Literal }}) SetValueStep
	{{ end }}{{ end }}{{ end }}

	{{ range $_, $t := .types }}
	Set{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, value []{{ $t.Literal }}) SetValueStep
	Append{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, values ...{{ $t.Literal }}) SetValueStep
	Prepend{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, values ...{{ $t.Literal }}) SetValueStep
	Remove{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, values ...{{ $t.Literal }}) SetValueStep
	{{ end }}
}

{{ range $_, $ot := $outer }}
{{ range $_, $it := $inner }}
{{ if ne $ot.Prefix "Bytes" }}
func (c *Context) Set{{ $ot.Prefix }}{{ $it.Prefix }}Map(col {{ $ot.Prefix }}{{ $it.Prefix }}MapColumn, value map[{{ $ot.Literal }}]{{ $it.Literal }}) SetValueStep {
	set(c, col, value)
	return c
}
{{ end }}{{ end }}{{ end }}

{{ range $_, $ot := $outer }}
{{ range $_, $it := $inner }}
{{ if ne $ot.Prefix "Bytes" }}
func (c *Context) Set{{ $ot.Prefix }}{{ $it.Prefix }}MapValue(col {{ $ot.Prefix }}{{ $it.Prefix }}MapColumn, key {{ $ot.Literal }}, value {{ $it.Literal }}) SetValueStep {
	setMap(c, col, key, value)
	return c
}
{{ end }}{{ end }}{{ end }}

{{ range $_, $t := .types }}
func (c *Context) Set{{ $t.Prefix }}(col {{ $t.Prefix }}Column, value {{ $t.Literal }}) SetValueStep {
	set(c, col, value)
	return c
}
{{ end }}

{{ range $_, $t := .types }}
func (c *Context) Set{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, value []{{ $t.Literal }}) SetValueStep {
	set(c, col, value)
	return c
}
func (c *Context) Append{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, values ...{{ $t.Literal }}) SetValueStep {
	appendList(c, col, values)
	return c
}
func (c *Context) Prepend{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, values ...{{ $t.Literal }}) SetValueStep {
	prependList(c, col, values)
	return c
}
func (c *Context) Remove{{ $t.Prefix }}Slice(col {{ $t.Prefix }}SliceColumn, values ...{{ $t.Literal }}) SetValueStep {
	removeList(c, col, values)
	return c
}
{{ end }}
